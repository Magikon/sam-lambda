AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: ProPair Serverless App

Globals:

  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Parameters:
  AWSUser:
    Description: AWS User for credentials
    Type: String
  BuildIdentifer:
    Description: Build identifier string
    Type: String
  Env:
    Type: String
    Description: Environment to deploy
  DBEndpoint:
    Type: String
    Description: RDS database endpoint
  DBName:
    Type: String
    Description: Name of the RDS database
  RedshiftDBEndpoint:
    Type: String
    Description: Redshift database endpoint
  RedshiftDBName:
    Type: String
    Description: Redshift database name
  RedshiftDBUser:
    Type: String
    Description: Redshift database user
  RedshiftDBPort:
    Type: String
    Description: Redshift database port
  ProPairBucketName:
    Type: String
    Description: Name of the ProPair data bucket
  AthenaDBName:
    Type: String
    Description: Name of the athena database
  ReportsBucketName:
    Type: String
    Description: Name of the reports bucket
  IsSandbox:
    Type: String
    Description: Determines if the deployment is a developer sandbox
  #MasterUserPassword:
  #  Description: The master password for the DB instance.
  #  Type: String
  #  NoEcho: true

Conditions:
  IsProduction:
    !Equals [!Ref Env, production]
  IsStaging:
    !Equals [!Ref Env, staging]
  IsNotSandbox:
    !Not [!Equals [!Ref IsSandbox, true]]
  IsProductionAndNotSandbox:
    !And [!Equals [!Ref Env, production], !Not [!Equals [!Ref IsSandbox, true]]]
  IsStagingAndNotSandbox:
    !And [!Equals [!Ref Env, staging], !Not [!Equals [!Ref IsSandbox, true]]]
Resources:
################################################################################################
  CreateLead:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: create.handler
      CodeUri: functions/leads_create
      MemorySize: 512
      Timeout: 300
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref Map
        - LambdaInvokePolicy:
            FunctionName: !Ref Recommend
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt InsertLeadTopic.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt LogLeadTopic.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt LogLeadInTopic.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ErrorNotificationTopic.TopicName
      Environment:
        Variables:
          ENV: !Ref Env
          TOPIC_INSERT_LEAD: !Ref InsertLeadTopic
          TOPIC_LOG_LEAD: !Ref LogLeadTopic
          TOPIC_LOG_LEAD_IN: !Ref LogLeadInTopic
          TOPIC_ERROR: !Ref ErrorNotificationTopic
          TOPIC_ROLLBAR: !Ref RollbarTopic
          FUNC_MAP: !Ref Map
          FUNC_RECOMMEND: !Ref Recommend
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          BUCKET: !Ref ProPairBucketName
          VELOCIFY_URL: https://service.leads360.com/ClientService.asmx/
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
      Events:
        LeadCreation:
          Type: Api
          Properties:
            Path: /leads
            Method: post
          Authorizer:
            Type: "AWS::ApiGateway::Authorizer"
################################################################################################
  LeadsStream:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: update.handler
      CodeUri: functions/leads_stream
      MemorySize: 512
      Timeout: 300
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref Map
        - LambdaInvokePolicy:
            FunctionName: !Ref Recommend
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt InsertLeadTopic.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt LogLeadTopic.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt LogLeadInTopic.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ErrorNotificationTopic.TopicName
      Environment:
        Variables:
          ENV: !Ref Env
          TOPIC_INSERT_LEAD: !Ref InsertLeadTopic
          TOPIC_LOG_LEAD: !Ref LogLeadTopic
          TOPIC_LOG_LEAD_IN: !Ref LogLeadInTopic
          TOPIC_ERROR: !Ref ErrorNotificationTopic
          TOPIC_ROLLBAR: !Ref RollbarTopic
          FUNC_MAP: !Ref Map
          FUNC_RECOMMEND: !Ref Recommend
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          BUCKET: !Ref ProPairBucketName
          VELOCIFY_URL: https://service.leads360.com/ClientService.asmx/
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
      Events:
        LeadStream:
          Type: Api
          Properties:
            Path: /leads_stream
            Method: post
          Authorizer:
            Type: "AWS::ApiGateway::Authorizer"
################################################################################################
  IndexAccounts:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.index
      CodeUri: functions/accounts
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /accounts
            Method: get
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  ShowAccount:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.show
      CodeUri: functions/accounts
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /accounts/{accountId}
            Method: get
            RestApiId:
                Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  CreateAccount:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.create
      CodeUri: functions/accounts
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /accounts
            Method: post
            RestApiId:
                Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  UpdateAccount:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.update
      CodeUri: functions/accounts
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /accounts/{accountId}
            Method: patch
            RestApiId:
                Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  IndexAgents:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.index
      CodeUri: functions/agents
      MemorySize: 512
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /agents
            Method: get
            RestApiId:
                Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  ShowAgent:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.show
      CodeUri: functions/agents
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /agents/{agentId}
            Method: get
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  CreateAgent:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.create
      CodeUri: functions/agents
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /agents
            Method: post
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  CreateAgents:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.create_agents
      CodeUri: functions/agents
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /agents/upload
            Method: post
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  UpdateAgent:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.update
      CodeUri: functions/agents
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /agents/{agentId}
            Method: patch
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  UpdateAgents:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.update_agents
      CodeUri: functions/agents
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 300
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /agents/upload
            Method: patch
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  IndexBranches:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.index
      CodeUri: functions/branches
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /branches
            Method: get
            RestApiId:
                Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  CreateBranch:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.create
      CodeUri: functions/branches
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /branches
            Method: post
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  ShowBranch:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.show
      CodeUri: functions/branches
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /branches/{branchId}
            Method: get
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  UpdateBranch:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.update
      CodeUri: functions/branches
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /branches/{branchId}
            Method: patch
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  IndexBranchGroups:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.index
      CodeUri: functions/branch_groups
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /branch_groups
            Method: get
            RestApiId:
                Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  CreateBranchGroup:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.create
      CodeUri: functions/branch_groups
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /branch_groups
            Method: post
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  ShowBranchGroup:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.show
      CodeUri: functions/branch_groups
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /branch_groups/{branchGroupId}
            Method: get
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  UpdateBranchGroup:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.update
      CodeUri: functions/branch_groups
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Timeout: 30
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      Events:
        Index:
          Type: Api
          Properties:
            Path: /branch_groups/{branchGroupId}
            Method: patch
            RestApiId:
              Ref: AccountsAPI
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  InsertRecord:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: insert.handler
      CodeUri: functions/leads/insert
      MemorySize: 512
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          BUCKET: !Ref ProPairBucketName
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951    
################################################################################################
  LogLead:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: log_lead_meta.handler
      CodeUri: functions/reporting/log_lead
      MemorySize: 512
      Timeout: 180
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ErrorNotificationTopic.TopicName
      Environment:
        Variables:
          ENV: !Ref Env
          BUCKET: !Ref ProPairBucketName
          TOPIC_ERROR: !Ref ErrorNotificationTopic
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          AWS_USER: !Ref AWSUser
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951    
################################################################################################
  Rollbar:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: rollbar.handler
      CodeUri: functions/reporting/rollbar
      MemorySize: 512
      Timeout: 300
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          BUCKET: !Ref ProPairBucketName
          REDSHIFT_DBNAME: !Ref RedshiftDBName
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DBUSER: !Ref RedshiftDBUser
          REDSHIFT_DBPORT: !Ref RedshiftDBPort
          AWS_USER: !Ref AWSUser
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951 
################################################################################################
  UpdateCampaigns:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: update.update_database
      CodeUri: functions/campaigns
      MemorySize: 1512
      Timeout: 900
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  UpdateLookupsForCampaigns:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: update.update_lookups
      CodeUri: functions/campaigns
      MemorySize: 1512
      Timeout: 900
      Role:
        'Fn::GetAtt':
            - Role
            - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  UpdateStagingLookupsFiles:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Condition: IsStaging
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: update.update_staging_folder
      CodeUri: functions/campaigns
      MemorySize: 512
      Timeout: 900
      Role:
        'Fn::GetAtt':
            - Role
            - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  ReportRecommendations:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: recommendations.handler
      CodeUri: functions/reporting
      MemorySize: 128
      Timeout: 300
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Events:
        GenerateReport:
          Type: Api
          Properties:
            Path: /reports/recommendations
            Method: get
          Authorizer:
            Type: "AWS::ApiGateway::Authorizer"
################################################################################################
  ReportEvents:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: events.handler
      CodeUri: functions/reporting
      MemorySize: 128
      Timeout: 300
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Events:
        GenerateReport:
          Type: Api
          Properties:
            Path: /reports/events
            Method: get
          Authorizer:
            Type: "AWS::ApiGateway::Authorizer"
################################################################################################
  ReportSummaries:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: summaries.handler
      CodeUri: functions/reporting
      MemorySize: 128
      Timeout: 300
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Events:
        GenerateReport:
          Type: Api
          Properties:
            Path: /reports/summaries
            Method: get
          Authorizer:
            Type: "AWS::ApiGateway::Authorizer"
################################################################################################
  LogLeadIn:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: log_lead_in.handler
      CodeUri: functions/reporting/log_lead_in
      MemorySize: 512
      Timeout: 900
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          BUCKET: !Ref ProPairBucketName
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951   
################################################################################################
  RepostLeads:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Handler: repost_leads.handler
      CodeUri: functions/leads/repost
      Layers:
        - !Ref NodeJsLayer
      MemorySize: 512
      Timeout: 900
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          BUCKET: !Ref ReportsBucketName
          BUCKET_LOGS: !Ref ProPairBucketName
          LEADS_ENDPOINT: 
            Fn::Join:
              - ""
              - - "https://"
                - Ref: "ServerlessRestApi"
                - ".execute-api.us-west-1.amazonaws.com/Stage/leads"
          VELOCIFY_URL: https://service.leads360.com/ClientService.asmx?wsdl
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  RepostLeadsScheduler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Handler: scheduler.handler
      CodeUri: functions/leads/repost
      Layers:
        - !Ref NodeJsLayer
      MemorySize: 512
      Timeout: 900
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Policies:
        - LambdaInvokePolicy:
          FunctionName: !Ref RepostLeads
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          FUNC_REPOST: !Ref RepostLeads
          LEADS_ENDPOINT: 
            Fn::Join:
              - ""
              - - "https://"
                - Ref: "ServerlessRestApi"
                - ".execute-api.us-west-1.amazonaws.com/Stage/leads"
          VELOCIFY_URL: https://service.leads360.com/ClientService.asmx?wsdl
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  Map:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: map.handler
      CodeUri: functions/leads/map
      MemorySize: 512
      Tracing: Active
      Timeout: 300
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  # Recommend:
    # Type: AWS::Serverless::Function
    # Properties:
      # Runtime: python2.7
      # Handler: recommend.recommend
      # CodeUri: functions/leads/recommend
      # MemorySize: 3008
      # Timeout: 900
      # Tracing: Active
      # Role:
        # 'Fn::GetAtt':
          # - Role
          # - Arn
      # Environment:
        # Variables:
          # ENV: !Ref Env
          # TOPIC_ERROR: !Ref ErrorNotificationTopic
          # TOPIC_ROLLBAR: !Ref RollbarTopic
          # BUCKET: !Ref ProPairBucketName
          # REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          # REDSHIFT_DB_USER: !Ref RedshiftDBUser
          # REDSHIFT_DB_NAME: !Ref RedshiftDBName
          # REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      # VpcConfig: 
        # SecurityGroupIds: 
          # - sg-0b54841712c67143c
          # - sg-0409e987266b33345
        # SubnetIds: 
          # - subnet-072fb25b65d0098f2
          # - subnet-08702ed2157ee7951
      # Policies:
        # - SNSPublishMessagePolicy:
            # TopicName: !GetAtt ErrorNotificationTopic.TopicName
################################################################################################
  DirectMail:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python2.7
      Handler: direct_mail.direct_mail
      CodeUri: functions/leads/recommend
      MemorySize: 3008
      Timeout: 900
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          TOPIC_ERROR: !Ref ErrorNotificationTopic
          TOPIC_ROLLBAR: !Ref RollbarTopic
          BUCKET: !Ref ProPairBucketName
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ErrorNotificationTopic.TopicName
################################################################################################
  ProcessDirectMail:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: api.handler
      CodeUri: functions/leads/direct_mail
      MemorySize: 512
      Tracing: Active
      Timeout: 900
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Policies:
        - LambdaInvokePolicy:
          FunctionName: !Ref DirectMail
      Environment:
        Variables:
          ENV: !Ref Env
          BUCKET: !Ref ProPairBucketName
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          FUNC_DIRECT_MAIL: !Ref DirectMail
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  MailSentAudit:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: audit.handler
      CodeUri: functions/leads/direct_mail
      MemorySize: 512
      Tracing: Active
      Timeout: 900
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          BUCKET: epastor01
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_DIRECT_MAIL: !Ref DirectMailTopic
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  UpdateAthenaPartitions:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: update_partitions.handler
      CodeUri: functions/reporting
      MemorySize: 128
      Tracing: Active
      Timeout: 30
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ATHENA_DB_NAME: !Ref AthenaDBName
          BUCKET: !Ref ReportsBucketName
################################################################################################
  ExpandRecommendation:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: expand_rec.expand
      CodeUri: functions/leads/expand_recommendation_string
      MemorySize: 3008
      Timeout: 900
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          BUCKET: !Ref ProPairBucketName
          TOPIC_ROLLBAR: !Ref RollbarTopic   
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  ExpandRecommendationScheduler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: scheduler.update
      CodeUri: functions/leads/expand_recommendation_string
      MemorySize: 256
      Timeout: 300
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          BUCKET: !Ref ProPairBucketName
          TOPIC_REC_EXPANSION: !Ref ExpandRecommendationTopic   
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  MortgageRateUpdater:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: updater.update
      CodeUri: functions/mortgage_rate/
      MemorySize: 256
      Timeout: 300
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  DailySREReport:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: nodejs12.x
      Layers:
        - !Ref NodeJsLayer
      Handler: daily_sre.handler
      CodeUri: functions/reporting/request_verification
      MemorySize: 256
      Timeout: 300
      Tracing: Active
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          BUCKET: !Ref ReportsBucketName
          BUCKET_LOGS: !Ref ProPairBucketName
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  GenerateSandboxLeads:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: generator.main
      CodeUri: functions/data_architecture/lead_generator
      MemorySize: 3008
      Timeout: 300
      Role:
        'Fn::GetAtt':
        - Role
        - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          LEADS_ENDPOINT: 
            Fn::Join:
              - ""
              - - "https://"
                - Ref: "ServerlessRestApi"
                - ".execute-api.us-west-1.amazonaws.com/Stage/leads"
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
    Condition: IsStaging
################################################################################################
  LeadsAudit:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: leads_producer_audit.update
      CodeUri: functions/data_architecture/leads
      MemorySize: 3008
      Timeout: 900
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  LeadsAuditScheduler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python2.7
      Layers:
        - !Ref PythonLayer
      Handler: audit_scheduler.update
      CodeUri: functions/data_architecture/leads
      MemorySize: 3008
      Timeout: 300
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_LEADS_AUDIT: !Ref LeadsAuditTopic
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  DataArchitectureLeadsRedshift:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: leads_producer.update
      CodeUri: functions/data_architecture/leads
      MemorySize: 3008
      Timeout: 900
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          BUCKET: epastor01
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  DataArchitectureLeadsScheduler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python2.7
      Layers:
        - !Ref PythonLayer
      Handler: scheduler.update
      CodeUri: functions/data_architecture/leads
      MemorySize: 3008
      Timeout: 300
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          #TOPIC_DATA_ARCH_LEADS: !Ref DataArchitectureLeadsTopic
          TOPIC_DATA_ARCH_LEADS_REDSHIFT: !Ref DataArchitectureLeadsRedshiftTopic
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  DataArchitectureEventsRedshift:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: events_producer.update
      CodeUri: functions/data_architecture/events
      MemorySize: 3008
      Timeout: 900
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  DataArchitectureEventsScheduler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: scheduler.update
      CodeUri: functions/data_architecture/events
      MemorySize: 512
      Timeout: 900
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
          TOPIC_DATA_ARCH_EVENTS: !Ref DataArchitectureEventsTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  DataArchitectureEncompass:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: encompass.update
      CodeUri: functions/data_architecture/encompass
      MemorySize: 3008
      Timeout: 300
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          BUCKET: epastor01
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  HRUpdates:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: hr_updates.update
      CodeUri: functions/data_architecture/agent_profiles
      MemorySize: 3008
      Timeout: 900
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  DataArchitectureCallsRedshift:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: calls_producer.update
      CodeUri: functions/data_architecture/calls
      MemorySize: 3008
      Timeout: 900
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  DataArchitectureCallsScheduler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python2.7
      Layers:
        - !Ref PythonLayer
      Handler: scheduler.update
      CodeUri: functions/data_architecture/calls
      MemorySize: 3008
      Timeout: 300
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          REDSHIFT_ENDPOINT: !Ref RedshiftDBEndpoint
          REDSHIFT_DB_USER: !Ref RedshiftDBUser
          REDSHIFT_DB_NAME: !Ref RedshiftDBName
          REDSHIFT_DB_PORT: !Ref RedshiftDBPort
          TOPIC_DATA_ARCH_CALLS_REDSHIFT: !Ref DataArchitectureCallsRedshiftTopic
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  MixTiers:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: handler.main
      CodeUri: functions/leads/mix
      MemorySize: 3008
      Timeout: 900
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951
################################################################################################
  MixTiersScheduler:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Runtime: python3.7
      Layers:
        - !Ref Python3Layer
      Handler: scheduler.update
      CodeUri: functions/leads/mix
      MemorySize: 512
      Timeout: 150
      Role:
        'Fn::GetAtt':
          - Role
          - Arn
      Environment:
        Variables:
          ENV: !Ref Env
          TOPIC_MIX_TIERS: !Ref MixTiersTopic
          TOPIC_ROLLBAR: !Ref RollbarTopic
      VpcConfig: 
        SecurityGroupIds: 
          - sg-0b54841712c67143c
          - sg-0409e987266b33345
        SubnetIds: 
          - subnet-072fb25b65d0098f2
          - subnet-08702ed2157ee7951

  AccountsAPI:
    Type: AWS::Serverless::Api
    Properties:
        StageName: Prod
        DefinitionBody:
            info:
              title: !Sub "Accounts API (${Env})"
            securityDefinitions:
              cognitoUserPoolAuthorizer:
                type: "apiKey"
                name: "Authorization"
                in: "header"
                x-amazon-apigateway-authtype: "cognito_user_pools"
                x-amazon-apigateway-authorizer:
                  type: "cognito_user_pools"
                  providerARNs:
                    - arn:aws:cognito-idp:us-west-2:450889472107:userpool/us-west-2_o5AQZrtjv
            paths:
              "/accounts":
                get:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IndexAccounts.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
                post:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateAccount.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
              "/accounts/{accountId}":
                get:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowAccount.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
                patch:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateAccount.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
              "/agents":
                get:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IndexAgents.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
                post:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateAgent.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
              "/agents/{agentId}":
                get:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowAgent.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
                patch:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateAgent.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
              "/agents/upload":
                patch:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateAgents.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
                post:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateAgents.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
              "/branches":
                get:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IndexBranches.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
                post:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateBranch.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
              "/branches/{branchId}":
                get:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowBranch.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
                patch:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateBranch.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
              "/branch_groups":
                get:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IndexBranchGroups.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
                post:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateBranchGroup.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
              "/branch_groups/{branchGroupId}":
                get:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShowBranchGroup.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
                patch:
                  security:
                    - cognitoUserPoolAuthorizer: []
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws_proxy
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateBranchGroup.Arn}/invocations
                  responses:
                    "200":
                      description: "200 response"
            swagger: '2.0'
  Role:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - sns.amazonaws.com
                - rekognition.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AmazonRekognitionFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/ComprehendFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'secretsmanager:GetSecretValue'
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: AWSGetSecretsRole
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'sns:Publish'
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: AWSLambdaEdgeExecutionRole
        - PolicyDocument:
            Statement:
              - Action:
                  - 'comprehend:BatchDetectDominantLanguage'
                  - 'comprehend:BatchDetectSentiment'
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: ComprehendExecutionRole
        - PolicyDocument:
            Statement:
              - Action:
                  - "athena:*"
                  - "glue:CreateDatabase"
                  - "glue:DeleteDatabase"
                  - "glue:GetDatabase"
                  - "glue:GetDatabases"
                  - "glue:UpdateDatabase"
                  - "glue:CreateTable"
                  - "glue:DeleteTable"
                  - "glue:BatchDeleteTable"
                  - "glue:UpdateTable"
                  - "glue:GetTable"
                  - "glue:GetTables"
                  - "glue:BatchCreatePartition"
                  - "glue:CreatePartition"
                  - "glue:DeletePartition"
                  - "glue:BatchDeletePartition"
                  - "glue:UpdatePartition"
                  - "glue:GetPartition"
                  - "glue:GetPartitions"
                  - "glue:BatchGetPartition"
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: AWSAthenaRole
        - PolicyDocument:
            Statement:
              - Action:
                  - "ses:GetIdentityVerificationAttributes"
                  - "ses:SendEmail"
                  - "ses:VerifyEmailIdentity"
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: SESRole
        - PolicyDocument:
            Statement:
              - Action:
                  - 'ssm:GetParameter*'
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: AWSSystemsManagerParameterStorePolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'workdocs:*'
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: AWSWorkDocsPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - "ec2:DescribeInstances"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:AttachNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DetachNetworkInterface"
                  - "ec2:ModifyNetworkInterfaceAttribute"
                  - "ec2:ResetNetworkInterfaceAttribute"
                  - "autoscaling:CompleteLifecycleAction"
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: AWSEC2Policies
    Type: 'AWS::IAM::Role'
  InsertLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt InsertRecord.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref InsertLeadTopic
  LogLeadLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LogLead.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref LogLeadTopic
  LogLeadInLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LogLeadIn.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref LogLeadInTopic
  RollbarLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt Rollbar.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref RollbarTopic
  DirectMailInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ProcessDirectMail.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref DirectMailTopic
  DataArchitectureEventsInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt DataArchitectureEventsRedshift.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref DataArchitectureEventsTopic
  DataArchitectureLeadsRedshiftInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt DataArchitectureLeadsRedshift.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref DataArchitectureLeadsRedshiftTopic
  ExpandRecommendationInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ExpandRecommendation.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref ExpandRecommendationTopic
  LeadsAuditInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LeadsAudit.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref LeadsAuditTopic
  DataArchitectureCallsRedshiftInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt DataArchitectureCallsRedshift.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref DataArchitectureCallsRedshiftTopic
  MixTiersInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt MixTiers.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref MixTiersTopic
      
  ErrorNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: "epastor@pro-pair.com"
        Protocol: email
      - Endpoint: "djohnson@pro-pair.com"
        Protocol: email
  NodeJsLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - nodejs12.x
      Content: 
        S3Bucket: !Ref ProPairBucketName
        S3Key: !Sub layers/${BuildIdentifer}/nodejs.zip
      Description: NodeJS lambda layer
      LayerName: propair-nodejs-layer

  PythonLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python2.7
      Content: 
        S3Bucket: !Ref ProPairBucketName
        S3Key: !Sub layers/${BuildIdentifer}/python.zip
      Description: Python lambda layer
      LayerName: propair-python-layer
  
  Python3Layer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content: 
        S3Bucket: !Ref ProPairBucketName
        S3Key: !Sub layers/${BuildIdentifer}/python3.zip
      Description: Python3 lambda layer
      LayerName: propair-python3-layer
  ScheduledUpdateCampaignsRule:
    Properties:
      Description: ScheduledUpdateCampaignsRule
      ScheduleExpression: cron(0 4 * * ? *)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - UpdateCampaigns
              - Arn
          Id: UpdateCampaignsV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox
  PermissionForScheduledUpdateCampaignsRule:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: UpdateCampaigns
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledUpdateCampaignsRule
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox
  ScheduledUpdateLookupsForCampaignsRule:
    Properties:
      Description: ScheduledUpdateLookupsForCampaignsRule
      ScheduleExpression: cron(0 3 * * ? *)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - UpdateLookupsForCampaigns
              - Arn
          Id: UpdateLookupsForCampaignsV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForScheduledUpdateLookupsForCampaignsRuleRule:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: UpdateLookupsForCampaigns
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledUpdateLookupsForCampaignsRule
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox
  ScheduledUpdateStagingLookupsFiles:
    Properties:
      Description: ScheduledUpdateStagingLookupsFiles
      ScheduleExpression: cron(30 2 * * ? *)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - UpdateStagingLookupsFiles
              - Arn
          Id: UpdateStagingLookupsFilesV1
    Type: 'AWS::Events::Rule'
    Condition: IsStagingAndNotSandbox

  PermissionForScheduledUpdateStagingLookupsFilesRule:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: UpdateStagingLookupsFiles
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledUpdateStagingLookupsFiles
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsStagingAndNotSandbox
  ScheduledCreateRule:
    Properties:
      Description: ScheduledCreateRule
      ScheduleExpression: rate(3 minutes)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - CreateLead
              - Arn
          Id: CreateLeadV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeCreateFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: CreateLead
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledCreateRule
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox

  RepostLeadsSchedulerRule:
      Properties:
        Description: RepostLeadsSchedulerRule
        ScheduleExpression: cron(0 8 * * ? *)
        State: ENABLED
        Targets:
          - Arn:
              'Fn::GetAtt':
                - RepostLeadsScheduler
                - Arn
            Id: RepostLeadsSchedulerV1
      Type: 'AWS::Events::Rule'

  PermissionForSchedulerToInvokeRepostLeadsScheduler:
      Properties:
        Action: 'lambda:InvokeFunction'
        FunctionName:
          Ref: RepostLeadsScheduler
        Principal: events.amazonaws.com
        SourceArn:
          'Fn::GetAtt':
            - RepostLeadsSchedulerRule
            - Arn
      Type: 'AWS::Lambda::Permission'
  ScheduledMapRule:
    Properties:
      Description: ScheduledMapRule
      ScheduleExpression: rate(3 minutes)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - Map
              - Arn
          Id: MapV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeMapFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Map
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledMapRule
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox
  ScheduledRecommendRule:
    Properties:
      Description: ScheduledRecommendRule
      ScheduleExpression: rate(3 minutes)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - Recommend
              - Arn
          Id: MapV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeRecommendFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Recommend
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledRecommendRule
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox
  ScheduledMailSentAuditRule:
    Properties:
      Description: ScheduledMailSentAuditRule
      ScheduleExpression: cron(0 13 * * ? *)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - MailSentAudit
              - Arn
          Id: MailSentAuditV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeMailSentAudit:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: MailSentAudit
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledMailSentAuditRule
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox
  ScheduledPartitionUpdate:
    Properties:
      Description: ScheduledPartitionUpdate
      ScheduleExpression: cron(0 3,15 * * ? *)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - UpdateAthenaPartitions
              - Arn
          Id: UpdatePartitionsV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokePartitionsFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: UpdateAthenaPartitions
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledPartitionUpdate
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox
  ScheduledExpandRecommendations:
    Properties:
      Description: ScheduledExpandRecommendations
      ScheduleExpression: cron(0 11 * * ? *)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - ExpandRecommendationScheduler
              - Arn
          Id: ExpandRecommendationScheduler
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeExpandRecommendationFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ExpandRecommendationScheduler
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledExpandRecommendations
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox
  ScheduledMortgageRateUpdater:
    Properties:
      Description: ScheduledMortgageRateUpdater
      ScheduleExpression: "cron(0 2,5,12 ? * FRI *)"
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - MortgageRateUpdater
              - Arn
          Id: MortgageRateUpdaterV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeScheduledMortgageRateUpdaterFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: MortgageRateUpdater
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledMortgageRateUpdater
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox
  ScheduledSREReport:
    Properties:
      Description: ScheduledSREReport
      ScheduleExpression: "cron(0 13 * * ? *)"
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - DailySREReport
              - Arn
          Id: DailySREReportV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeScheduledSREReportFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: DailySREReport
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledSREReport
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox
  MyDbSecurityByCIDRIPGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Ingress for CIDRIP
      DBSecurityGroupIngress:
        CIDRIP: "0.0.0.0/0"
    Condition: IsProduction
  GenerateSandboxLeadsRule:
    Properties:
      Description: GenerateSandboxLeadsRule
      ScheduleExpression: rate(2 minutes)
      State: ENABLED
      Targets:
      - Arn:
          'Fn::GetAtt':
          - GenerateSandboxLeads
          - Arn
        Id: GenerateSandboxLeadsV1
    Type: 'AWS::Events::Rule'
    Condition: IsStagingAndNotSandbox

  PermissionForGenerateSandboxLeadsRuleToInvokeGenerateSandboxLeadsFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: GenerateSandboxLeads
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
        - GenerateSandboxLeadsRule
        - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsStagingAndNotSandbox
  ScheduledDataArchitectureCallsSchedulerRule:
    Properties:
      Description: ScheduledAgentCallsRule
      ScheduleExpression: rate(30 minutes)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - DataArchitectureCallsScheduler
              - Arn
          Id: DataArchitectureCallsSchedulerV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeDataArchitectureCallsFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: DataArchitectureCallsScheduler
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledDataArchitectureCallsSchedulerRule
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox
  ScheduledMixTiersSchedulerRule:
    Properties:
      Description: ScheduledAgentCallsRule
      ScheduleExpression: cron(0 7 ? * SUN *)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - MixTiersScheduler
              - Arn
          Id: MixTiersSchedulerV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeMixTiersSchedulerFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: MixTiersScheduler
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledMixTiersSchedulerRule
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox
  ScheduledLeadsRule:
    Properties:
      Description: ScheduledLeadsRule
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - DataArchitectureLeadsScheduler
              - Arn
          Id: DataArchitectureLeadsSchedulerV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeDataArchitectureLeadsSchedulerFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: DataArchitectureLeadsScheduler
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledLeadsRule
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox

  ScheduledLeadsRule12:
    Properties:
      Description: ScheduledLeadsRule
      ScheduleExpression: cron(0 10,23 * * ? *)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - DataArchitectureLeadsScheduler
              - Arn
          Id: DataArchitectureLeadsSchedulerV1
          Input: '{"format": "12hours"}'
        
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForLeadsScheduler12:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: DataArchitectureLeadsScheduler
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledLeadsRule12
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox

  ScheduledLeadsAuditRule:
    Properties:
      Description: ScheduledLeadsAuditRule
      ScheduleExpression: cron(0 6 * * ? *)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - LeadsAuditScheduler
              - Arn
          Id: LeadsAuditSchedulerV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeLeadsAuditSchedulerFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: LeadsAuditScheduler
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledLeadsAuditRule
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox

  ScheduledEventsRule:
    Properties:
      Description: ScheduledEventsRule
      ScheduleExpression: rate(3 minutes)
      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - DataArchitectureEventsScheduler
              - Arn
          Id: DataArchitectureEventsSchedulerV1
    Type: 'AWS::Events::Rule'
    Condition: IsNotSandbox

  PermissionForSchedulerToInvokeDataArchitectureEventsFunction:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: DataArchitectureEventsScheduler
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - ScheduledEventsRule
          - Arn
    Type: 'AWS::Lambda::Permission'
    Condition: IsNotSandbox


  InsertLeadTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt InsertRecord.Arn

  LogLeadTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt LogLead.Arn
  LogLeadInTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt LogLeadIn.Arn
  RollbarTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt Rollbar.Arn
  DirectMailTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt ProcessDirectMail.Arn
  DataArchitectureLeadsRedshiftTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt DataArchitectureLeadsRedshift.Arn
  ExpandRecommendationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt ExpandRecommendation.Arn
  LeadsAuditTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt LeadsAudit.Arn
  DataArchitectureEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt DataArchitectureEventsRedshift.Arn
  DataArchitectureCallsRedshiftTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt DataArchitectureCallsRedshift.Arn
  MixTiersTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt MixTiers.Arn
  LeadsTable:
    Type: "AWS::Serverless::SimpleTable"
    Properties:
      PrimaryKey:
         Name: id
         Type: String
      ProvisionedThroughput:
         ReadCapacityUnits: 5
         WriteCapacityUnits: 5

  CustomersTable:
    Type: "AWS::Serverless::SimpleTable"
    Properties:
      PrimaryKey:
         Name: token
         Type: String
      ProvisionedThroughput:
         ReadCapacityUnits: 5
         WriteCapacityUnits: 5
